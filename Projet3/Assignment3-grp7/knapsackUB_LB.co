/*
 * LINGI2365 - Constraint Programming
 * Project 3 - Search
 *
 * Groupe 7 :
 * Crochelet Martin (2236-10-00)
 * Vanwelde Romain (3143-10-00)
 *
 */


// import the CP library. 
// replace cpsolver by cotfd if you use and older version of comet
import cotfd;
include "knapsackLBUB";

// Initial time
int t0 = System.getCPUTime();

// create the CP Solver 
Solver<CP> cp();

Integer np(cp.getNPropag());
cout << "Initiating search..." << endl;

// get input file path
int nbArgs = System.argc();
string[] args = System.getArgs();
string path = "deffault";
forall (i in 2..nbArgs)
   if (args[i-1].prefix(2).equals("-f"))
      path = args[i-1].suffix(2);

ifstream file(path);

// read the number of objects
int no = file.getInt();

// create a range for the objects
range P = 1..no;

// create data variables
int weight[P];         // weight of item
int usefulness[P];     // usefulness

// read data from file
forall(i in P) {
   file.getInt();
   weight[i] = file.getInt();
   usefulness[i] = file.getInt();
}

int C = file.getInt();

Integer ub(0);
ub := getUB(no, C, weight, usefulness);



Integer lb(0);
lb := getLB(no, C, weight, usefulness);

Integer count(1);

// model variables
var<CP>{int} bin[1..no](cp, 0..1);
var<CP>{int} load(cp, 0..C);
var<CP>{int} totalUsefulness(cp, lb..ub);

whenever cp.getSearchController()@onCompletion(){
           ub := (int) ceil((lb+ub)/2.0) - 1;
           count := count + 1;
           cp.reStart();
}

whenever cp.getSearchController()@onFeasibleSolution(Solution s){
           
           lb := totalUsefulness;
           if (lb == ub){
               forall (i in 1..no)
              cp.exit();
           }
           count := count + 1;
           cp.reStart();
}

solve<cp> {
	cp.post(sum(i in 1..no) (bin[i] == 1) * weight[i] == load);
           cp.post(sum(i in 1..no) (bin[i] == 1) * usefulness[i] == totalUsefulness);
           
} using {
      cp.post(totalUsefulness<=ub);
      cp.post(totalUsefulness>=ceil((lb+ub)/2.0));
      forall(i in P) by (- usefulness[i])
         tryall<cp>(v in 0..1 : bin[i].memberOf(v)) by (-v)
            label(bin[i],v);
}




int t1 = System.getCPUTime();


cout << "totalUsefulness = " << totalUsefulness << endl;
cout << "time: " << t1 - t0 << endl;
cout << "#choices = " << cp.getNChoice() << endl;
cout << "#fail    = " << cp.getNFail() << endl;
cout << "#propag  = " << cp.getNPropag() - np << endl;


