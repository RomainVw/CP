...

// read the number of objects
int no = file.getInt();

// create a range for the objects
range P = 1..no;

// create data variables
int weight[P];         // weight of item
int usefulness[P];     // usefulness

// read data from file
forall(i in P) {
   file.getInt();
   weight[i] = file.getInt();
   usefulness[i] = file.getInt();
}

int C = file.getInt();

Integer ub(0);
ub := getUB(no, C, weight, usefulness);

Integer lb(0);
lb := getLB(no, C, weight, usefulness);

// model variables
var<CP>{int} bin[1..no](cp, 0..1);
var<CP>{int} load(cp, 0..C);
var<CP>{int} totalUsefulness(cp, lb..ub);

whenever cp.getSearchController()@onCompletion(){
           ub := totalUsefulness;
           cp.reStart();
}

whenever cp.getSearchController()@onFeasibleSolution(Solution s){
           lb := totalUsefulness;
           if (lb == ub){
              cp.exit();
           }
           cp.reStart();
}

solve<cp> {
	cp.post(sum(i in 1..no) (bin[i] == 1) * weight[i] == load);
           cp.post(sum(i in 1..no) (bin[i] == 1) * usefulness[i] == totalUsefulness);
           
} using {
      cp.post(totalUsefulness<=ub);
      cp.post(totalUsefulness>=ceil((lb+ub)/2.0));
      forall(i in P) by (- usefulness[i])
         tryall<cp>(v in 0..1 : bin[i].memberOf(v)) by (-v)
            label(bin[i],v);
}


...