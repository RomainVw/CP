...

// read the number of objects
int no = file.getInt();

// create a range for the objects
range P = 1..no;

// create data variables
int weight[P];         // weight of item
int usefulness[P];     // usefulness

// read data from file
forall(i in P) {
   file.getInt();
   weight[i] = file.getInt();
   usefulness[i] = file.getInt();
}

int C = file.getInt();

// model variables
var<CP>{int} bin[1..no](cp, 0..1);
var<CP>{int} load(cp, 0..C);



maximize<cp>
           sum(i in P) bin[i]  * usefulness[i]
subject to {
	cp.post(sum(i in 1..no) (bin[i] == 1) * weight[i] == load);
} using {

   
   /* First strategy */
   /*forall(i in P) by (weight[i])
      tryall<cp>(v in 0..1 : bin[i].memberOf(v)) by (-v)
         label(bin[i],v);*/

   /* Second strategy */
   forall(i in P) by (- usefulness[i])
      tryall<cp>(v in 0..1 : bin[i].memberOf(v)) by (-v)
         label(bin[i],v);


   /* Third strategy */
   /*forall(i in P) by (- usefulness[i] / weight[i])
      tryall<cp>(v in 0..1 : bin[i].memberOf(v)) by (-v)
         label(bin[i],v);*/

   /* First Fail strategy */
   //labelFF(bin);

}

...