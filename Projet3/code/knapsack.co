// import the CP library. 
// replace cpsolver by cotfd if you use and older version of comet
import cotfd;
int t0 = System.getCPUTime();

// create the CP Solver 
Solver<CP> cp();

Integer np(cp.getNPropag());
cout << "Initiating search..." << endl;

// fill in input file path
int nbArgs = System.argc();
string[] args = System.getArgs();
string path = "deffault";
forall (i in 2..nbArgs)
   if (args[i-1].prefix(2).equals("-f"))
      path = args[i-1].suffix(2);
//cout << path << endl; 
//string path = "knapsack instances/A/knapsack-A-24.txt";
ifstream file(path);
// read the number of objects
int no = file.getInt();

// create a range for the objects
range P = 1..no;
// create data variables
int weight[P];         // weight of item
int usefulness[P];     // sefulness

// read data from file
forall(i in P) {
   file.getInt();
   weight[i] = file.getInt();
   usefulness[i] = file.getInt();
}

int C = file.getInt();

// model variables
var<CP>{int} bin[1..no](cp, 0..1);
var<CP>{int} load(cp, 0..C);



maximize<cp>
           sum(i in P) bin[i]  * weight[i]
subject to {
	cp.post(sum(i in 1..no) (bin[i] == 1) * weight[i] == load);
} using {

   


   /* First strategy */
   /*forall(i in P) by (weight[i])
      tryall<cp>(v in 0..1 : bin[i].memberOf(v)) by (-v)
         label(bin[i],v);*/

   /* Second strategy */
   forall(i in P) by (- usefulness[i])
      tryall<cp>(v in 0..1 : bin[i].memberOf(v)) by (-v)
         label(bin[i],v);


   /* Third strategy */
   /*forall(i in P) by (- usefulness[i] / weight[i])
      tryall<cp>(v in 0..1 : bin[i].memberOf(v)) by (-v)
         label(bin[i],v);*/


   //labelFF(bin);

   

         forall (obj in 1..no){   
             //cout << "Objet #" << obj << " has domain " << bin[obj] << endl; 
         }
}


int t1 = System.getCPUTime();
cout << "Solution = " << bin << endl;
cout << "Solution = " << load << endl;
cout << "time: " << t1 - t0 << endl;
cout << "#choices = " << cp.getNChoice() << endl;
cout << "#fail    = " << cp.getNFail() << endl;
cout << "#propag  = " << cp.getNPropag() - np << endl;


