// import the CP library. 
// replace cpsolver by cotfd if you use and older version of comet
import cotfd;

// create the CP Solver 
Solver<CP> cp();

// read input
// fill in the absolute path for the instance
string path = "/Users/Romain/Desktop/Q8/LINGI2365_Constraint_Programming/LINGI2365_Constraint_Programming/Tomography_Instances/input4.txt";
// create file reader
ifstream file(path);
// read data
int n = file.getInt();
int m = file.getInt();
int row[1..n];
int col[1..m];
int dia[1..(n + m - 1)];
forall(i in 1..n)
	row[i] = file.getInt();
forall(i in 1..m)
	col[i] = file.getInt();
forall(i in 1..(n + m - 1))
	dia[i] = file.getInt();

// initialize variable to count the solution
Integer ns(0);

// model variables
var<CP>{int} x[1..n, 1..m](cp, 0..1);

int S = sum(i in 1..n) row[i];

solveall<cp> {
	// post your constraints here
            forall(i in 1..n) cp.post( sum (j in 1..m) x[i,j] == row[i] );	
            forall(j in 1..m) cp.post( sum (i in 1..n) x[i,j] == col[j] );	
            forall(i in 1..(n + m - 1)) cp.post( sum (j in 1..n, k in 1..m : ((j+k) == (i+1)) )  x[j,k] == dia[i] );	

} using {
	// default seach procedure
	label(x);
	ns := ns + 1;
	printSolution(n, m, x);
}

cout << "Number of solutions: ";
cout << ns << endl;

/****************AUX FUNCTIONS******************/

// function used to print a solution
function void printSolution(int n, int m, var<CP>{int}[,] x) {
	cout << "+";
	forall(j in 1..m) cout << "-";
	cout << "+" << endl;
	forall(i in 1..n) {
		cout << "|";
		forall(j in 1..m) {
			if(x[i, j] == 1) {
				cout << "#";
			} else {
				cout << " ";
			}
		}
		cout << "|" <<endl;
	}
	cout << "+";
	forall(j in 1..m) cout << "-";
	cout << "+" << endl;
}


