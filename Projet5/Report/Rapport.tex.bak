\documentclass[a4paper ,12pt,french]{article}
% Packages usuels
%\usepackage{etex} % pour circuitikz
%\usepackage{tikz}
%\usepackage{circuitikz} % pour les circuits électriques

\usepackage[utf8]{inputenc}
%\usepackage[margin=1.55cm]{geometry}
\usepackage[bottom=2cm , left=2.5cm ,right=2.5cm, top=2cm]{geometry}
\usepackage[T1]{fontenc}
\usepackage{url}
%\usepackage{color}
\usepackage{lmodern}
\usepackage[french]{babel}
\usepackage[indentfirst]{titlesec}
\usepackage[dvips]{graphicx}
\usepackage{eurosym}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{makeidx}
\usepackage{array}
\usepackage{colortbl}
\usepackage[table,dvipsnames,svgnames]{xcolor}
\usepackage{xspace}
\usepackage{fancybox}
\usepackage{textcomp}
\usepackage{listings}


\usepackage{hyperref}
\usepackage{setspace}
\usepackage{fancyhdr}
\usepackage{graphicx}

%\usepackage[margin=0.75in]{geometry}
\usepackage[version=3]{mhchem}
%\usepackage{chemist}
\usepackage{multicol}
\usepackage{float}
\usepackage{wrapfig} %écrire txt et image côte à côte
\usepackage[rightcaption]{sidecap}
\usepackage{amsthm}
\usepackage[squaren, Gray, cdot]{SIunits}
\usepackage[absolute]{textpos}%positionnement de cadres
\usepackage[final]{pdfpages} %traitement des pdf
\usepackage{subfigure}
%\usepackage[framed,numbered,autolinebreaks,useliterate]{mcode}%pour traiter le code matlab
%\usepackage{setspace}% pour les interlignes
%\onehalfspacing %interligne 1.5
%\doublespacing %interligne 2
%\renewcommand{\baselinestretch}{1.5}  %interligne défini
%\usepackage{vmargin}% pour les marges
%\setmarginsrb{2.5}{2.5}{2.5}{2.5}{}{}{}{} % marges de 2.5 cm 
%\addto\captionsfrench{\def\tablename{Tableau}} % pour avoir TABLEAU et pas TABLE dans la légende des tableaux..
%\setlength{\parskip}{1cm}   %espacement fixe entre chaque paragraphe
\setlength{\parindent}{1cm}  %modifie la valeur de l'alinéas
%\addtolength{\voffset}{-1.5cm} % (diminue la marge du haut)
\addtolength{\textheight}{-2cm} % (augmente la longueur du texte)
%\addtolength{\hoffset}{-1cm} (diminue la marge de gauche)
%\addtolength{\textwidth}{2cm}  (augmente la largeur du texte)
%\addtocounter{secnumdepth}{1}  si jamais on veut utiliser \subsubsubsecion
\usepackage[hang,center,bf]{caption} %pour les légendes
\setlength{\captionmargin}{30pt}
\usepackage[hang,flushmargin]{footmisc} %à mettre avec ENGLISH dans babel pour avoir les notes de bas de page à gauche et non indentées
\usepackage[nonumberlist,style=altlist,toc]{glossaries} % Pour faire un glossaire
\makeglossaries
%\addto\captionsfrench{\renewcommand*{\glossaryname}{Glossary}}
\usepackage{wasysym}
\usepackage[square, numbers, comma, sort&compress]{natbib} % Use the natbib reference package - read up on this to edit the reference style; if you want text (e.g. Smith et al., 2012) for the in-text references (instead of numbers), remove 'numbers' 
%\hypersetup{urlcolor=blue, colorlinks=true} % Colors hyperlinks in blue - change to black if annoying
\title{Project 2 - Constraint Programming } % Defines the thesis title - don't touch this
%-------------------------------------------------------------------------------------------------------------------------------------------------------------




\begin{document}

\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}

\lstset{ %
  language=c,                				% the language of the code
  basicstyle=\footnotesize,           	% the size of the fonts that are used for the code
  numbers=left,                   			% where to put the line-numbers
  numberstyle=\tiny\color{gray},  	% the style that is used for the line-numbers
  stepnumber=1,                   			% the step between two line-numbers. If it's 1, each line 
                                  						% will be numbered
  numbersep=5pt,                  			% how far the line-numbers are from the code
  backgroundcolor=\color{white},   % choose the background color. You must add \usepackage{color}
  showspaces=false,               % show spaces adding particular underscores
  showstringspaces=false,         % underline spaces within strings
  showtabs=false,                 % show tabs within strings adding particular underscores
  frame=single,                   % adds a frame around the code
  rulecolor=\color{black},        % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. commens (green here))
  tabsize=4,                      % sets default tabsize to 2 spaces
  captionpos=b,                   % sets the caption-position to bottom
  breaklines=true,                % sets automatic line breaking
  breakatwhitespace=false,        % sets if automatic breaks should only happen at whitespace
  title=\lstname,                   % show the filename of files included with \lstinputlisting;
                                  % also try caption instead of title
  keywordstyle=\color{blue},          % keyword style
  commentstyle=\color{dkgreen},       % comment style
  stringstyle=\color{mauve},         % string literal style
  escapeinside={\%*}{*)},            % if you want to add LaTeX within your code
  morekeywords={*,...}               % if you want to add more keywords to the set
}

\floatstyle{plain}
%\newfloat{graphique}{!hb}{lgr}[chapter]
\floatname{graphique}{Graph}

%\setstretch{1.1} % Line spacing of 1.3

% Define the page headers using the FancyHdr package and set up for one-sided printing
\fancyhead{} % Clears all page headers and footers
\rhead{\thepage} % Sets the right side header to show the page number
\lhead{} % Clears the left side page header

\pagestyle{fancy} % Finally, use the "fancy" page style to implement the FancyHdr headers

\newcommand{\HRule}{\rule{\linewidth}{0.5mm}} % New command to make the lines in the title page

\begin{titlepage}
\pagestyle{fancy} % Finally, use the "fancy" page style to implement the FancyHdr headers

\begin{tabular}{cc}
\begin{minipage}{0.5\textwidth}
\begin{flushleft}
\includegraphics[scale=0.1]{./logoingisbleu.jpg} % University/department logo - uncomment to place it
\end{flushleft}
\end{minipage}
 & 
 \begin{minipage}{0.43\textwidth}
\begin{flushright}
\includegraphics[scale=0.5]{./epl.jpg} % University/department logo - uncomment to place it
\end{flushright}
\end{minipage}
\end{tabular} 



\begin{center}
\vspace{100 px}
\textsc{\LARGE Catholic University of Louvain}\\[1cm] % University name
\textsc{\Large Project 5}\\[0.5cm] % Thesis type
 
\HRule \\[0.4cm] % Horizontal line
{\huge \bfseries LINGI2365 - Constraint Programming}\\[0.4cm] % Thesis title
\HRule \\[1.5cm] % Horizontal line
 

\begin{tabular}{cc}
\begin{minipage}{0.5\textwidth}
\begin{flushleft} \large
\emph{Auteurs:}\\
{Vanwelde Romain (3143-10-00)\\
Crochelet Martin (2236-10-00)\\ \ \\
Groupe 7} 
\end{flushleft}
\end{minipage} & \begin{minipage}{0.46\textwidth}
\centering
\begin{flushright} \large
\emph{Superviseurs:} \\
{Pr. Yves Deville\\
François Aubry
}
\end{flushright}
\end{minipage}\\[3cm] \\ 
\end{tabular} 

 
%\large \textit{A thesis submitted in fulfilment of the requirements\\ for the degree of \degreename}\\[0.3cm] % University requirement text
%\textit{in the}\\[0.4cm]
%\groupname\\\deptname\\[2cm] % Research group name and department name

 \begin{center}
{\large \today }\\[4cm] % Date 
 \end{center}


\vfill
\end{center}

\end{titlepage}

\lhead{\emph{LINGI2365 - Constraint Programming}} % Set the left side page header to "Contents"
\tableofcontents % Write out the Table of Contents

\thispagestyle{fancy}

\pagebreak
\setcounter{page}{1}
\pagestyle{fancy} % Finally, use the "fancy" page style to implement the FancyHdr headers

\section{Explain the provided model (how are the constraints enforced, what do the global constraints used do, what do the decision variables represent, . . . )}



First of all, the model creates three range variables : 
\begin{itemize}
\item Customers from 1 to n.
\item Depots from n+1 to n+K
\item CustomersAndDepots from 1 to n+K
\end{itemize}
As we can see, we create one depot per vehicle (K vehicles) because we use the giant tour representation.\\

\subsubsection*{Decision variables}
We can now take a look to decisions variables:
\begin{verbatim}
var<CP>{int} previous[CustomersAndDepots](cp,CustomersAndDepots);
\end{verbatim}
Here, previous will contain for each customer/depot the id of the previous customer/depot.

\begin{verbatim}
var<CP>{int} routeOf[i in CustomersAndDepots](cp,1..K);
\end{verbatim}
routeOf will contain for each customer/depot the id of the vehicle which will stop there.

\begin{verbatim}
var<CP>{int} service_start[i in CustomersAndDepots](cp,Horizon);
\end{verbatim}
service\_start will contain for each customer/depot the time when it will begin to be serviced.

\begin{verbatim}
var<CP>{int} departure[i in CustomersAndDepots](cp,Horizon);
\end{verbatim}
departure will contain  for each customer/depot the time when the vehicle will leave the current customer/depot.

\begin{verbatim}
var<CP>{int} totDist = minCircuit(previous,distance);
\end{verbatim}
totDist will contain the minimum distance linking all customer/depot.


\subsubsection*{Constraints}

\begin{verbatim}
forall(i in Customers) cp.post(routeOf[i] == routeOf[previous[i]]);
\end{verbatim}
This constraint forces all the customers to be served by the same vehicle that the previous customer/depot.
Thus, if we visualize it on the giant tour representation, it means that if we take a depot, this will have a specific vehicle,  and that all the following customers (until the following depot) will have the same vehicle which will serve them.


\begin{verbatim}
forall(i in Depots) cp.post(routeOf[i] == i - Customers.getUp());
\end{verbatim}
This constraint will assign to all depots a different vehicle.

\begin{verbatim}
forall(i in CustomersAndDepots){
        cp.post(service_start[i] == max(tw_start[i],departure[previous[i]] + 
            distance[previous[i],i]));
        cp.post(service_start[i] <= tw_end[i]);
        cp.post(service_start[i] >= tw_start[i]);
}
\end{verbatim}

This constraint express the fact that all customers/depot will begin to be served either at the beginning of the time window if the vehicle were on place sooner, or when the vehicle arrives (time when it leaves the previous customer plus the displacement time (which is equal to the distance)).\\
Then it expresses the fact that the service must begins before it ends (which is logical).\\
Last, it express the fact that for each customer/depot, the service will not be performed earlier than the beginning of its own starting window.

	
	
\begin{verbatim}
forall(i in Customers){
        cp.post(departure[i] ==  service_start[i] + service_duration[i]);
}
\end{verbatim}
This constraint express the fact that the vehicle leaves a customer the duration of the service after having began the task.
	
		
\begin{verbatim}
forall(i in Depots){
        cp.post(departure[i] == 0);
}
\end{verbatim}
This constraint express the fact that the vehicle will immediately leave the depot at time t0.


\subsubsection*{Global constraint}
\begin{verbatim}
cp.post(multiknapsack(routeOf, demand, all(k in 1..K) Q));
\end{verbatim}
This constraint express the fact that all  the remaining demand must fit in the available vehicles.



\section{Explain how you adapt the model to minimize the number of routes}

A first adaptation could be created by maintaining the previous model, and adding a decision variable. 
\begin{verbatim}
var<CP>{int} nOfRoutes(cp,1..K);
\end{verbatim} 
This variable will keep track of the number of different routes (This is what we will try to minimize).\\

On our giant tour representation, a vehicle that is not used is represented by two depots following each other. The vehicle directly leaves the depot, and directly arrives to the other again.

\begin{verbatim}
cp.post(nOfRoutes == (sum(i in Depots) previous[i] <= Customers.getUp()) );
\end{verbatim}
This constraint assign to nOfRoutes the number of depot which follows a customer. Thus, this represents the number of used vehicles that we want to minimize.\\

Since we want to first minimize the number of route, and the total distance, we minimized our problem with the following evaluation function.
\begin{verbatim}
minimize<cp> (nOfRoutes * upperBound + totDist)
\end{verbatim}
where upperBound is the sum of all distances between all customers/customers and customers/depots. This way, we ensure that upperBound will always be bigger than totDist, and so a solution having a nOfRoute lower than another will always be better considering this evaluation function.\\

After having created this program, we realized that we could optimize it by using a dichotomic function. Instead of optimizing the number of vehicles and the number of routes at the same time, we decided to optimize first only the number of vehicles, and then the distance. The search on the number of vehicles is done with a dichotomic search, and the search on the route distance is done as an optimization problem.\\

The search on the number of vehicles:\\
We now give as argument the upperbound for the tested values, and we add some additional constraints. 
\begin{verbatim}
cp.post(nOfRoutes <= testedValue);
\end{verbatim}
Is used to test our problem with an upper Bound.
\begin{verbatim}
forall(i in n+1..n+K-testedValue){
	cp.post(previous[i+1]==i);
}
\end{verbatim}
This constraint is used to gain over symmetry. We imposed that the vehicles that weren't used would be assigned in the first part range. (And so those one have the previous var set to the previous depot in the id order).\\


When we throw the program, we first fix the lower bound to 9 vehicles. Indeed, the best number of vehicles currently found on internet are most of time 10 (except one which is 9) and so 9 is a good lower bound to begin the program with, and to keep a chance to find a solution with better value that the present ones on the internet (If a better solution is found, we always can throw the research again with a lower lower bound). The upper bound is set to 25.



          
The optimization of the routes length:\\
This optimisation is the same that in the model that we received, with the constraints explained above that assigns the number of vehicles used.\\

The heuristic function :\\
\lstinputlisting[language=C]{heuristics_functions.co}

For the first one, we try  to first bind variables that have the least remaining values, and by that trying to assign them the closest depot/customer as previous value.

For the second one, we try to bind variables that have the sooner end window, and by that trying to assign them  the closest depot/customer as previous value.

\section{Indicate and analyse your test results}

As you can see in the table \ref{h1}, our first heuristic is quite efficient: for an average of 1 minute, 36 seconds per problems, we obtain five resolutions that have the same "optimal" number of vehicles. However, some effort is still mandatory to get the optimal distances. It is also interesting to note that for the first instance we \textbf{seem} to obtain a better distance than the commonly accepted one however this is provoked by the floating point flooring error is the distance computation. (All distances have to be divided by 100 to be compared with the ones from the reference website)\\

\begin{table}[!h]
\centering
\begin{tabular}{ | c | c | c |}
\hline
Instance\# & \#Vehicles & Distance \\ 
\hline
 C101 & 10 & 82873 \\ 
 C102 & 10 & 109019 \\ 
 C103 & 10 & 129146 \\ 
 C104 & 10 & 109296 \\ 
 C105 & 11 & 103763 \\ 
 R101 & 19 & 176622 \\ 
 R102 & 19 & 168127 \\ 
 R103 & 14 & 149756 \\ 
 R104 & 12 & 130257 \\ 
 R105 & 16 & 153319 \\ 
\hline
\end{tabular}
\caption{Results of the first heuristic}
\label{h1}
\end{table}

Our second heuristic (table \ref{h2}) however seems to be a lot less efficient as it does only find solutions for 6 of the problems. A remarkable thing here is that even if we obtain less solutions, the distances we obtain for those solutions are better than the ones furnished by the previous heuristic. (the average time for a computation here is of 1 minute, 55 seconds)\\

\begin{table}[!h]
\centering
\begin{tabular}{ | c | c | c |}
\hline
Instance\# & \#Vehicles & Distance \\ 
\hline
 C101 & 10 & 82873 \\ 
 C102 & 14 & 92713 \\ 
 C103 & 15 & 103349 \\ 
 C104 & 25 & / \\ 
 C105 & 11 & 103763 \\ 
 R101 & 19 & 176622 \\ 
 R102 & 25 & / \\ 
 R103 & 25 & / \\ 
 R104 & 25 & / \\ 
 R105 & 16 & 153319 \\ 
\hline
\end{tabular}
\caption{Results of the first heuristic}
\label{h2}
\end{table}

The last heuristic (table \ref{h3}) we have tried is a combination of the two above: we minimize the product of the nearer time of end window with the number of remaining values. This combination gives, as expected, less optimal results than for the first optimization while giving even better distances for the found solutions.(the average time for a computation here is of 1 minute, 50 seconds)\\

\begin{table}[!h]
\centering
\begin{tabular}{ | c | c | c |}
\hline
Instance\# & \#Vehicles & Distance \\ 
\hline
 C101 & 10 & 82873 \\ 
 C102 & 12 & 87124 \\ 
 C103 & 11 & 101999 \\ 
 C104 & 10 & 109296 \\ 
 C105 & 11 & 103763 \\ 
 R101 & 19 & 176622 \\ 
 R102 & 25 & / \\ 
 R103 & 25 & / \\ 
 R104 & 25 & / \\ 
 R105 & 16 & 153319 \\ 
\hline
\end{tabular}
\caption{Results of the first heuristic}
\label{h3}
\end{table}

\section{Usage}
In order to use our program you must have the two comet programs along with the bash script in the same folder. Furthermore, you must have a folder named "Instances" that contains all the instances you want to run.
\end{document}